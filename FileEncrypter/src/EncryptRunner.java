import javax.crypto.*;
import java.io.*;
import java.security.*;
import java.security.cert.CertificateException;
import java.util.Scanner;

/**
 * Created by amirshavit on 12/16/17.
 */
public class EncryptRunner {

    private final String plainInputFileName;
    private final String encryptedOutputFileName;
    private KeyStore keystore;

    public EncryptRunner(String keyStoreFile, String keyStorePass, String plainTextFile, String encryptedOutput) throws Exception {
        loadKeyStore(keyStoreFile, keyStorePass);
        this.plainInputFileName = plainTextFile;
        this.encryptedOutputFileName = encryptedOutput;
    }

    public void start() throws InvalidKeyException, IOException, NoSuchAlgorithmException, NoSuchPaddingException {

        scanFile(plainInputFileName);

        ///  TODO: 1. Hybrid Encryption (both symmetric and asymmetric)

        // TODO: 2. Alice (Sender) => Generate random symmetric key (to encrypt)
        /// TODO: define key as 2048 length?
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        System.out.println("KeyGenerator: algo = " + keyGen.getAlgorithm() + ", provider = " + keyGen.getProvider());
        SecretKey aesKey = keyGen.generateKey();
        System.out.println("AES Key: algo = " + aesKey.getAlgorithm() + ", format = " + aesKey.getFormat());

        Cipher myCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        myCipher.init(Cipher.ENCRYPT_MODE, aesKey);
        System.out.println("Cipher: algo = " + myCipher.getAlgorithm() +
                ", provider = " + myCipher.getProvider() +
                ", iv = " + myCipher.getIV() +
                ", params = " + myCipher.getParameters() +
                ", blockSize = " + myCipher.getBlockSize());

        // TODO: 3. Alice uses symmetric key to encrypt data
        // Generate symmetric encrypted data
        FileInputStream fis;
        FileOutputStream fos;
        CipherInputStream cis;
        fis = new FileInputStream(plainInputFileName);
        cis = new CipherInputStream(fis, myCipher);
        fos = new FileOutputStream(encryptedOutputFileName);
        byte[] b = new byte[8];
        int i = cis.read(b);
        while (i != -1) {
            fos.write(b, 0, i); i = cis.read(b);
        }

        fos.close();
        cis.close();
        fis.close();

        // TODO: 4. Alice signs encrypted data with her private key


        // TODO: 5. Alice encrypt symmetric key K (getEncoded) with bob's asymetric public key (another cipher engine)




        // retrieve parameters generated by underlying cipher implementation
            AlgorithmParameters algParams = myCipher.getParameters();
            // get parameter encoding and store it away
            byte[] encodedAlgParams = algParams.getEncoded();


        // TODO: 6/ End with one file of encrypted data + one xml file: algorithm params + encrypted key signed with
        // Bobâ€™s public from par 9)
    }


    private void loadKeyStore(String keyStoreFile, String keyStorePass) throws Exception {
        FileInputStream ksInputStream = null;
        try {
            ksInputStream = new FileInputStream(keyStoreFile);
            /// TODO: Choose store provider
            keystore = KeyStore.getInstance("JKS", "SUN");
            keystore.load(ksInputStream, keyStorePass.toCharArray());
            ksInputStream.close();
        } catch (IOException e) {
            throw new IOException(e.getMessage());
        } catch (NoSuchAlgorithmException | NoSuchProviderException | KeyStoreException | CertificateException e ) {
            throw new Exception(e.getMessage());
        }
    }

    private void scanFile(String aFileName) {
        File file = new File(aFileName);

        try (Scanner scanner = new Scanner(file)) {

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                System.out.println(line);
            }

            scanner.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
